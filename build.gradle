buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'org.pegdown:pegdown:1.4.1'
    }
}

import groovy.text.SimpleTemplateEngine

import org.pegdown.PegDownProcessor

def readTags() {
    def tags = []
    def proc = "git tag -l".execute()
    proc.in.eachLine { line -> tags += line}
    tags.sort {}
    Collections.reverse( tags )
    tags
}

def readTagMessage(String tag) {
    def message = []
    def proc = "git cat-file tag $tag".execute()
    def startCollection = false
    proc.in.eachLine { line -> 
        if (line.isEmpty()) {
            startCollection = true
        }
        if (startCollection) {
            message += line
        }
    }
    proc.err.eachLine { line -> println line }
    message
}



task releaseNotes() << {
    def releaseNotes = new File('releaseNotes.md')
    releaseNotes.delete()
    def tags = readTags()

    releaseNotes << "# Versions\n"


    tags.each {tag -> 
        releaseNotes << "- [$tag](#$tag)\n"
    }

    releaseNotes << "\n# Release Notes\n\n"

    tags.each {tag -> 
        releaseNotes << "## ${tag}<a name='${tag}'></a>\n"
        def message = readTagMessage(tag)
        message.each{releaseNotes << "$it\n\n"}
    }

    def writer = new StringWriter()
    def pdp = new PegDownProcessor()
    def engine = new SimpleTemplateEngine()
    def template = engine.createTemplate(new File("releaseNotes.tpl"))
    def daten = [releaseNotes:pdp.markdownToHtml(new File("releaseNotes.md").text), application: project.name]

    def ergebnis = template.make(daten)
    new File('releaseNotes.html').withWriter { w ->
        w.write(ergebnis)
    }
}
